<!doctype html>
<html>
<head>
<meta charset="utf-8">
<title>CMPS 162: Module 1 Programming Project</title>
<style>* { font-family: monospace; }</style>
<script>


//-----------//
// Variables //
//-----------//
console.log("Variables");

// 1. Create a string variable called 'name' and store your name in it.

var name = "Mando Gonzalvez"; 

// 2. Write code to alert your name in the browser.

alert(name); 

// 3. Create two number variables name 'first' and 'second'. Assign 13 to
//    first and 26 to second. Alert the sum of the two variables in the browser.

var first = 13;
var second = 26;
alert(first + second); 

//--------//
// Values //
//--------//
console.log("Values");

// 1. Define a variable 'string_variable' and a variable 'number_variable'.
//    Assign "10" to the string variable and 99 to the number variable.
//    Alert the value of string_variable plus number_variable (use the +
//    operator). Can you explain what happened?

var string_variable = "10"; 
var number_variable = 99;
alert(string_variable + number_variable); 

// Strings and numbers are two different kinds of data, thus, they cannot be combined in a mathematical expression.

//-------------//
// Expressions //
//-------------//
console.log("Expressions");

// 1. Explain what the result of 13 % 5 will be.

// 13 % 5 is what is left over after trying to divide 13 by 5.  13/5 is 2.6.
// Round 2.6 down to 2 and multiply it by 5 (the original divisor) and you will get 10.
// 13 (the original number) - 10 = 3.  The remainder will be 3. 

// 2. What will be printed to the console after executing the following 3
//    lines? Why?
var num = 3;
console.log(num++);
console.log(++num);

// For the first statement, it comes out as 3 because the increment happens in order after the console.log.
// The console would log the value of the variable before the increment. 
// For the second statement, the console would log 5 because the increment symbol being between the variable
// and the command increments them both.  

// The console will read "3" then "4." In the first 

// 3. Remove the ambiguity from the following line but keep the result
//    exactly the same.
console.log(2 * 3 + 3 - 4 / 3);

((2 * 3) + 3 - (4 / 3)); 


</script>
</head>
<body>
  See console!
</body>
</html>
